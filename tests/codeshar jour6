http://symfony.com/doc/current/bundles/SensioFrameworkExtraBundle/annotations/converters.html
http://symfony.com/doc/current/bundles/SensioFrameworkExtraBundle/annotations/converters.html#doctrineconverter-options

{{ dump(app.request.get('_route')) }}

http://www.doctrine-project.org/api/orm/2.5/class-Doctrine.ORM.EntityRepository.htmlhttp://www.doctrine-project.org/api/orm/2.5/class-Doctrine.ORM.EntityRepository.html

https://symfony.com/doc/current/reference/constraints/NotBlank.html

Validation des entités
Entity Product
- Toutes les propriétés sont obligatoires
- Title : doit contenu minimum 5 caractères et maximum 100 caractères
- Description : doit contenir maximum 300 caractères
- Price : doit être supérieur à 0

Entity Category
- Toutes les propriétés sont obligatoires
- Title : doit contenir minimum 2 caractères
- Description : doit contenir maximum 300 caractères
- Si la position est égale à 0 alors le titre doit être "Par défaut". Indice: Regarder du côté de la constrainte "Callback"

<?php

use Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter;

class ProductController extends Controller
{Product
    /**
     * @Route("/produits/{id}", name="product_show")
     * @ParamConverter("product", class="AdminBundle:Product")
     * Le param converter transforme la variable $id en object ($product) de la class Product
     */
    public function showAction(Product $product)
		{
  		die(dump($product));
      /*
      $em = $this->getDoctrine()->getManager();
      $product = $em->getRepository('AdminBundle:Product')->find($id);

      // Vérification si le produit est bien en BDD
      if (!$product) {
      	throw $this->createNotFoundException("Le produit n'existe pas");
      }
      */


      return $this->render('product/show.html.twig', ['product' => $product]);
    }

  	/**
     * @Route("/produits/supprimer/{id}", name="product_remove")
     */
    public function removeAction($id, Request $request)
    {
      $em = $this->getDoctrine()->getManager();
      $product = $em->getRepository('AdminBundle:Product')->find($id);

      // Vérification si le produit est bien en BDD
      if (!$product) {
      	throw $this->createNotFoundException("Le produit n'existe pas");
      }

      $em->remove($product);
      $em->flush();

      $messageSuccess = 'Votre produit a été supprimé';


      if ($request->isXmlHttpRequest()) {
        	// use Symfony\Component\HttpFoundation\JsonResponse;
      		return new JsonResponse(['message' => $messageSuccess]);
      }

      $this->addFlash('success', $messageSuccess);

      // Redirection sur la page qui liste tous les produits
      return $this->redirectToRoute('produits');
    }
}


/****************/
/* script JS     */
/****************/

<a href="http://localhost/symfony/web/app_dev.php/admin/categorie/supprimer/1" class="btn btn-danger">Supprimer</a>

<a href="http://localhost/symfony/web/app_dev.php/admin/categorie/supprimer/1">
	<button class="btn btn-danger">Supprimer</button>
</a>

<script>

  $(document).ready(function(){

    $(".table").on('click', '.btn-danger', function(event){
			//console.log($(this))
      event.preventDefault();
      if (confirm('Etes-vous sur ?')) {
        var elementA = $(this);
        var elementParentTable = elementA.closest('.table');
        var linkUrl = elementA.parent().attr('href');
      	// Requête Ajax
        // http://api.jquery.com/jquery.ajax/
        // The jqXHR Object => promise
        $.ajax({
          url : linkUrl,
          method: "GET",
        }).done(function(data){
          elementA.closest('tr').fadeOut(700, function(){
            //console.log($(this));
            $(this).remove();

            // Suppression des éventuels messages existants
            $('.alert-success').remove();

            // Ajout du message
            var message = $('<p class="alert alert-danger">').append(data.message);
            elementParentTable.before(message);
            message.delay(3000).fadeOut()
          })
        });

      }

    });


});

</script>


/****************/
/* Category.php */
/****************/
use Symfony\Component\Validator\Context\ExecutionContextInterface;

class Category {

  private $title;

  private $position;

  /**
   * @Assert\Callback
   */
  public function validate(ExecutionContextInterface $context, $payload)
    {
    	//die(dump($this->getPosition()));

      if ($this->getPosition() == 0 && $this->getTitle() != "Par défaut") {
        	$context->buildViolation('La position "0" est réservé à la catégorie "par défaut"')
                // atPath permet d'attacher l'erreur à une propriété
            		//->atPath('position')
                ->addViolation();
      }
    }

}



/***************************/
/* CategoryController.php  */
/**************************/
class CategoryController extends Controller {


}